@inject Microsoft.Extensions.Localization.IStringLocalizer<NavMenu> _localizer
@using System.Security.Claims

<UserCard />
<MudNavMenu>
    <MudNavLink Href="/" Match="NavLinkMatch.All" Icon="@Icons.Material.Outlined.Home">@_localizer["Home"]</MudNavLink>


    @*<MudListSubheader Class="mt-2 mb-n2">@_localizer["Personal"]</MudListSubheader>*@
    @if (_canViewDashboards)
    {

        <MudNavLink Href="/dashboard" Icon="@Icons.Material.Outlined.Dashboard">
            @_localizer["Dashboard"]
        </MudNavLink>
        <MudNavLink Href="/dashboard" Icon="@Icons.Material.Outlined.Folder">
            @_localizer["Dépôt"]
        </MudNavLink>
        <MudNavLink Href="/dashboard" Icon="@Icons.Material.Outlined.Map">
            @_localizer["Plan parcellaire"]
        </MudNavLink>
    }
    @*<MudNavLink Href="/account" Icon="@Icons.Material.Outlined.SupervisorAccount">
        @_localizer["Account"]
        </MudNavLink>*@


    <MudNavGroup Title="Création de titre foncier" Expanded=@isExpended(0) ExpandedChanged=@(()=>hasChanged(0)) Icon="@Icons.Outlined.CreateNewFolder" Color="Color.Error">


        <MudNavLink Href="#" Icon="@Icons.Material.Filled.Assignment">
            Immatriculation
        </MudNavLink>

        <MudNavLink Href="#" Icon="@Icons.Material.Outlined.VerticalSplit">
            Morcellement / Démembrement
        </MudNavLink>
        <MudNavLink Href="#" Icon="@Icons.Material.Outlined.MergeType">
            Fusion
        </MudNavLink>
    </MudNavGroup>

    <MudNavGroup Title="Mise-à-jour de titre foncier" Expanded=@isExpended(1) ExpandedChanged=@(()=>hasChanged(1)) Icon="@Icons.Outlined.Update" Color="Color.Error">

        <MudNavLink Href="#" Icon="@Icons.Material.Outlined.LooksTwo">
            Duplicata
        </MudNavLink>

        <MudNavLink Href="#" Icon="@Icons.Material.Outlined.Refresh">
            Actualisation
        </MudNavLink>
        <MudNavLink Href="#" Icon="@Icons.Material.Outlined.RestoreFromTrash">
            Rectification
        </MudNavLink>
        <MudNavLink Href="#" Icon="@Icons.Material.Outlined.DevicesOther">
            Autres opérations post-immatriculation
        </MudNavLink>
    </MudNavGroup>


    <MudNavGroup Title="Opérations diverses" Expanded=@isExpended(2) ExpandedChanged=@(()=>hasChanged(2)) Icon="@Icons.Outlined.DevicesOther" Color="Color.Error">

        <MudNavLink Href="#" Icon="@Icons.Material.Outlined.Explore">
            Expertises foncières
        </MudNavLink>

        <MudNavLink Href="#" Icon="@Icons.Material.Outlined.CardGiftcard">
            Plan cadastral
        </MudNavLink>
        <MudNavLink Href="#" Icon="@Icons.Material.Outlined.Info">
            Renseignements
        </MudNavLink>
        <MudNavLink Href="#" Icon="@Icons.Material.Outlined.Anchor">
            Opposition
        </MudNavLink>
        <MudNavLink Href="#" Icon="@Icons.Material.Outlined.Analytics">
            Evaluation cadastrale
        </MudNavLink>
        <MudNavLink Href="#" Icon="@Icons.Material.Outlined.RuleFolder">
            Récapitulatifs de dossiers
        </MudNavLink>
    </MudNavGroup>

    @if (_canViewUsers || _canViewRoles)
    {

        <MudNavGroup Title=@_localizer["Administrator"] Expanded=@isExpended(3) ExpandedChanged=@(()=>hasChanged(3)) Icon="@Icons.Outlined.VerifiedUser" Color="Color.Error">

            @if (_canViewUsers)
            {
                <MudNavLink Href="/identity/users" Icon="@Icons.Material.Outlined.Person">
                    @_localizer["Users"]
                </MudNavLink>
            }
            <MudNavLink Href="/swagger/index.html" Target="_blank" Icon="@Icons.Material.Outlined.LiveHelp">
                @_localizer["Swagger"]
            </MudNavLink>
            @if (_canViewRoles)
            {
                <MudNavLink Href="/identity/roles" Icon="@Icons.Material.Outlined.Person">@_localizer["Roles"]</MudNavLink>
            }
            @if (_canViewAuditTrails)
            {
                <MudNavLink Href="/audit-trails" Icon="@Icons.Material.Outlined.Security">
                    @_localizer["Audit Trails"]
                </MudNavLink>
            }
        </MudNavGroup>
    }

    @if (_canViewDocuments || _canViewDocumentTypes)
    {

        <MudNavGroup Title=@_localizer["Document Management"] Expanded=@isExpended(4) ExpandedChanged=@(()=>hasChanged(4)) Icon="@Icons.Outlined.FolderSpecial" Color="Color.Error">

            @if (_canViewDocuments)
            {
                <MudNavLink Href="/mydocument-store" Icon="@Icons.Material.Outlined.AttachFile">
                    @_localizer["My Document Store"]
                </MudNavLink>
            }
            @if (_canViewDocumentTypes)
            {
                <MudNavLink Href="/document-store" Icon="@Icons.Material.Outlined.FolderOpen">
                    @_localizer["Document Store"]
                </MudNavLink>
                <MudNavLink Href="/document-types" Icon="@Icons.Material.Outlined.FolderShared">
                    @_localizer["Document Types"]
                </MudNavLink>
            }
        </MudNavGroup>
    }
    @if (_canViewChat)
    {

        <MudNavLink Href="/chat" Icon="@Icons.Material.Outlined.Chat">
            @_localizer["Chat"]
        </MudNavLink>
    }
</MudNavMenu>

@code {

    private ClaimsPrincipal _authenticationStateProviderUser;
    private bool _canViewHangfire;
    private bool _canViewDashboards;
    private bool _canViewDocuments;
    private bool _canViewDocumentTypes;
    private bool _canViewAuditTrails;
    private bool _canViewRoles;
    private bool _canViewUsers;
    private bool _canViewChat;
    private bool _canViewProducts;
    private bool _canViewBrands;
    private int toShow = -1;
    private int isAnt = -1;
    private int count = -1;
    protected override async Task OnParametersSetAsync ()
    {
        toShow = -1;

        _authenticationStateProviderUser = await _stateProvider.GetAuthenticationStateProviderUserAsync();
        _canViewHangfire = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Hangfire.View)).Succeeded;
        _canViewDashboards = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Dashboards.View)).Succeeded;
        _canViewDocuments = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Documents.View)).Succeeded;
        _canViewDocumentTypes = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.DocumentTypes.View)).Succeeded;
        _canViewAuditTrails = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.AuditTrails.View)).Succeeded;
        _canViewRoles = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Roles.View)).Succeeded;
        _canViewUsers = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Users.View)).Succeeded;
        _canViewChat = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Communication.Chat)).Succeeded;
    }

    protected bool isExpended (int i)
    {
        return i == toShow && (toShow!=isAnt) && count%2==1;
    }
    private void hasChanged (int i)
    {
        if (isAnt == toShow)
            count++;
        else
            count = 0;
        isAnt = toShow;
        toShow = i;
        
    }
  }